{"version":3,"file":"sessions-8c0d57dd.js","sources":["../../src/stores/sessions.js"],"sourcesContent":["import { sessionsAPI } from \"@/services/api.js\";\nimport { defineStore } from \"pinia\";\nimport { computed, ref } from \"vue\";\n\nexport const useSessionsStore = defineStore(\"sessions\", () => {\n    // State\n    const sessions = ref([]);\n    const loading = ref(false);\n    const error = ref(null);\n    const currentSession = ref(null);\n    const currentSessionLoading = ref(false);\n    const practiceStats = ref(null);\n    const statsLoading = ref(false);\n\n    // Getters\n    const sessionsSortedByDate = computed(\n        () => {\n            return [...sessions.value].sort(\n                (a, b) => { // Sort by start_time in descending order (newest\n                    // first)\n                    return new Date(b.startTime) - new Date(a.startTime);\n                },\n            );\n        },\n    );\n\n    const sessionById = computed(\n        () => {\n            return (id) => sessions.value.find((session) => session.id === id);\n        },\n    );\n\n    const sessionsByExercise = computed(\n        () => {\n            return (exerciseId) =>\n                sessions.value.filter(\n                    (session) =>\n                        session.exercises &&\n                        session.exercises.some(\n                            (ex) => ex.exerciseId === exerciseId,\n                        ),\n                );\n        },\n    );\n\n    const totalPracticeTime = computed(() => {\n        return sessions.value.reduce((total, session) => {\n            if (session.startTime && session.endTime) {\n                const startTime = new Date(session.startTime);\n                const endTime = new Date(session.endTime);\n                const durationMinutes = (endTime - startTime) / (1000 * 60);\n                return total + durationMinutes;\n            }\n            return total;\n        }, 0);\n    });\n\n    // Actions\n    async function fetchSessions(params = {}) {\n        loading.value = true;\n        error.value = null;\n\n        try {\n            const response = await sessionsAPI.getAll(params);\n            sessions.value = response.data.sessions || [];\n            return response.data;\n        } catch (err) {\n            error.value = err.message || \"Failed to fetch practice sessions\";\n            console.error(\"Error fetching practice sessions:\", err);\n            throw err;\n        } finally {\n            loading.value = false;\n        }\n    }\n\n    async function fetchSession(id) {\n        currentSessionLoading.value = true;\n        error.value = null;\n\n        try {\n            const response = await sessionsAPI.get(id);\n            currentSession.value = response.data;\n\n            // Also update the session in the sessions array if it exists\n            const index = sessions.value.findIndex((s) => s.id === id);\n            if (index !== -1) {\n                sessions.value[index] = response.data;\n            } else {\n                sessions.value.push(response.data);\n            }\n\n            return response.data;\n        } catch (err) {\n            error.value = err.message ||\n                `Failed to fetch practice session with ID ${id}`;\n            console.error(`Error fetching practice session ${id}:`, err);\n            throw err;\n        } finally {\n            currentSessionLoading.value = false;\n        }\n    }\n\n    async function createSession(sessionData) {\n        loading.value = true;\n        error.value = null;\n\n        try {\n            const response = await sessionsAPI.create(sessionData);\n            const newSession = response.data;\n            sessions.value.unshift(\n                newSession,\n            ); // Add to the beginning of the array\n            return newSession;\n        } catch (err) {\n            error.value = err.message || \"Failed to create practice session\";\n            console.error(\"Error creating practice session:\", err);\n            throw err;\n        } finally {\n            loading.value = false;\n        }\n    }\n\n    async function updateSession(id, sessionData, updateMask) {\n        loading.value = true;\n        error.value = null;\n\n        try {\n            const response = await sessionsAPI.update(\n                id,\n                sessionData,\n                updateMask,\n            );\n            const updatedSession = response.data;\n\n            // Update in the sessions array\n            const index = sessions.value.findIndex((s) => s.id === id);\n            if (index !== -1) {\n                sessions.value[index] = updatedSession;\n            }\n\n            // Update currentSession if it's the one being edited\n            if (currentSession.value && currentSession.value.id === id) {\n                currentSession.value = updatedSession;\n            }\n\n            return updatedSession;\n        } catch (err) {\n            error.value = err.message ||\n                `Failed to update session with ID ${id}`;\n            console.error(`Error updating session ${id}:`, err);\n            throw err;\n        } finally {\n            loading.value = false;\n        }\n    }\n\n    async function deleteSession(id) {\n        loading.value = true;\n        error.value = null;\n\n        try {\n            await sessionsAPI.delete(id);\n\n            // Remove from the sessions array\n            sessions.value = sessions.value.filter((s) => s.id !== id);\n\n            // Clear currentSession if it's the one being deleted\n            if (currentSession.value && currentSession.value.id === id) {\n                currentSession.value = null;\n            }\n        } catch (err) {\n            error.value = err.message ||\n                `Failed to delete session with ID ${id}`;\n            console.error(`Error deleting session ${id}:`, err);\n            throw err;\n        } finally {\n            loading.value = false;\n        }\n    }\n\n    async function fetchPracticeStats(params = {}) {\n        statsLoading.value = true;\n        error.value = null;\n\n        try {\n            const response = await sessionsAPI.getStats(params);\n            practiceStats.value = response.data;\n            return response.data;\n        } catch (err) {\n            error.value = err.message || \"Failed to fetch practice statistics\";\n            console.error(\"Error fetching practice statistics:\", err);\n            throw err;\n        } finally {\n            statsLoading.value = false;\n        }\n    }\n\n    // Return the store\n    return {\n        // State\n        sessions,\n        loading,\n        error,\n        currentSession,\n        currentSessionLoading,\n        practiceStats,\n        statsLoading,\n\n        // Getters\n        sessionsSortedByDate,\n        sessionById,\n        sessionsByExercise,\n        totalPracticeTime,\n\n        // Actions\n        fetchSessions,\n        fetchSession,\n        createSession,\n        updateSession,\n        deleteSession,\n        fetchPracticeStats,\n    };\n});\n"],"names":["useSessionsStore","defineStore","sessions","ref","loading","error","currentSession","currentSessionLoading","practiceStats","statsLoading","sessionsSortedByDate","computed","a","b","sessionById","id","session","sessionsByExercise","exerciseId","ex","totalPracticeTime","total","startTime","durationMinutes","fetchSessions","params","response","sessionsAPI","err","fetchSession","index","s","createSession","sessionData","newSession","updateSession","updateMask","updatedSession","deleteSession","fetchPracticeStats"],"mappings":"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"}