import{s as c}from"./api-f0127578.js";import{d as $,r as i,c as f}from"./index-b8d30765.js";const A=$("sessions",()=>{const t=i([]),n=i(!1),a=i(null),o=i(null),v=i(!1),h=i(null),d=i(!1),m=f(()=>[...t.value].sort((s,e)=>new Date(e.startTime)-new Date(s.startTime))),y=f(()=>s=>t.value.find(e=>e.id===s)),w=f(()=>s=>t.value.filter(e=>e.exercises&&e.exercises.some(r=>r.exerciseId===s))),g=f(()=>t.value.reduce((s,e)=>{if(e.startTime&&e.endTime){const r=new Date(e.startTime),u=(new Date(e.endTime)-r)/(1e3*60);return s+u}return s},0));async function S(s={}){n.value=!0,a.value=null;try{const e=await c.getAll(s);return t.value=e.data.sessions||[],e.data}catch(e){throw a.value=e.message||"Failed to fetch practice sessions",console.error("Error fetching practice sessions:",e),e}finally{n.value=!1}}async function T(s){v.value=!0,a.value=null;try{const e=await c.get(s);o.value=e.data;const r=t.value.findIndex(l=>l.id===s);return r!==-1?t.value[r]=e.data:t.value.push(e.data),e.data}catch(e){throw a.value=e.message||`Failed to fetch practice session with ID ${s}`,console.error(`Error fetching practice session ${s}:`,e),e}finally{v.value=!1}}async function x(s){n.value=!0,a.value=null;try{const r=(await c.create(s)).data;return t.value.unshift(r),r}catch(e){throw a.value=e.message||"Failed to create practice session",console.error("Error creating practice session:",e),e}finally{n.value=!1}}async function D(s,e,r){n.value=!0,a.value=null;try{const u=(await c.update(s,e,r)).data,p=t.value.findIndex(F=>F.id===s);return p!==-1&&(t.value[p]=u),o.value&&o.value.id===s&&(o.value=u),u}catch(l){throw a.value=l.message||`Failed to update session with ID ${s}`,console.error(`Error updating session ${s}:`,l),l}finally{n.value=!1}}async function I(s){n.value=!0,a.value=null;try{await c.delete(s),t.value=t.value.filter(e=>e.id!==s),o.value&&o.value.id===s&&(o.value=null)}catch(e){throw a.value=e.message||`Failed to delete session with ID ${s}`,console.error(`Error deleting session ${s}:`,e),e}finally{n.value=!1}}async function E(s={}){d.value=!0,a.value=null;try{const e=await c.getStats(s);return h.value=e.data,e.data}catch(e){throw a.value=e.message||"Failed to fetch practice statistics",console.error("Error fetching practice statistics:",e),e}finally{d.value=!1}}return{sessions:t,loading:n,error:a,currentSession:o,currentSessionLoading:v,practiceStats:h,statsLoading:d,sessionsSortedByDate:m,sessionById:y,sessionsByExercise:w,totalPracticeTime:g,fetchSessions:S,fetchSession:T,createSession:x,updateSession:D,deleteSession:I,fetchPracticeStats:E}});export{A as u};
//# sourceMappingURL=sessions-8c0d57dd.js.map
