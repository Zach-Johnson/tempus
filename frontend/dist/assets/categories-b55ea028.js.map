{"version":3,"file":"categories-b55ea028.js","sources":["../../src/stores/categories.js"],"sourcesContent":["import { categoriesAPI } from \"@/services/api.js\";\nimport { defineStore } from \"pinia\";\nimport { computed, ref } from \"vue\";\n\nexport const useCategoriesStore = defineStore(\"categories\", () => {\n    // State\n    const categories = ref([]);\n    const loading = ref(false);\n    const error = ref(null);\n    const currentCategory = ref(null);\n    const currentCategoryLoading = ref(false);\n\n    // Getters\n    const categoriesSorted = computed(\n        () => {\n            return [...categories.value].sort(\n                (a, b) => a.name.localeCompare(b.name),\n            );\n        },\n    );\n\n    const categoryById = computed(() => {\n        return (id) => categories.value.find((cat) => cat.id === id);\n    });\n\n    // Actions\n    async function fetchCategories() {\n        loading.value = true;\n        error.value = null;\n\n        try {\n            const response = await categoriesAPI.getAll();\n            // Replace the entire categories array to avoid duplicates\n            categories.value = response.data.categories || [];\n        } catch (err) {\n            error.value = err.message || \"Failed to fetch categories\";\n            console.error(\"Error fetching categories:\", err);\n        } finally {\n            loading.value = false;\n        }\n    }\n\n    async function fetchCategory(id) {\n        currentCategoryLoading.value = true;\n        error.value = null;\n\n        try {\n            const response = await categoriesAPI.get(id);\n            const fetchedCategory = response.data;\n\n            // Set the current category\n            currentCategory.value = fetchedCategory;\n\n            // Also update the category in the categories array if it exists\n            const index = categories.value.findIndex((c) => c.id === id);\n            if (index !== -1) {\n                categories.value[index] = fetchedCategory;\n            } else {\n                categories.value.push(fetchedCategory);\n            }\n\n            return fetchedCategory;\n        } catch (err) {\n            error.value = err.message ||\n                `Failed to fetch category with ID ${id}`;\n            console.error(`Error fetching category ${id}:`, err);\n            currentCategory.value = null;\n            return null;\n        } finally {\n            currentCategoryLoading.value = false;\n        }\n    }\n\n    async function createCategory(categoryData) {\n        loading.value = true;\n        error.value = null;\n\n        try {\n            const response = await categoriesAPI.create(categoryData);\n            const newCategory = response.data;\n\n            // Check if this category already exists in our array\n            const existingIndex = categories.value.findIndex((c) =>\n                c.id === newCategory.id\n            );\n            if (existingIndex === -1) {\n                // Only add if it doesn't exist\n                categories.value.push(newCategory);\n            } else {\n                // Update existing entry\n                categories.value[existingIndex] = newCategory;\n            }\n\n            return newCategory;\n        } catch (err) {\n            error.value = err.message || \"Failed to create category\";\n            console.error(\"Error creating category:\", err);\n            throw err;\n        } finally {\n            loading.value = false;\n        }\n    }\n\n    async function updateCategory(id, categoryData, updateMask) {\n        loading.value = true;\n        error.value = null;\n\n        try {\n            // Convert paths array to comma-separated string if it's in object\n            // format\n            let formattedUpdateMask = updateMask;\n            if (\n                updateMask && typeof updateMask === \"object\" && updateMask.paths\n            ) {\n                formattedUpdateMask = updateMask.paths.join(\",\");\n            }\n\n            const response = await categoriesAPI.update(\n                id,\n                categoryData,\n                formattedUpdateMask,\n            );\n            const updatedCategory = response.data;\n\n            // Update in the categories array\n            const index = categories.value.findIndex((c) => c.id === id);\n            if (index !== -1) {\n                categories.value[index] = updatedCategory;\n            }\n\n            // Update currentCategory if it's the one being edited\n            if (currentCategory.value && currentCategory.value.id === id) {\n                currentCategory.value = updatedCategory;\n            }\n\n            return updatedCategory;\n        } catch (err) {\n            error.value = err.message ||\n                `Failed to update category with ID ${id}`;\n            console.error(`Error updating category ${id}:`, err);\n            throw err;\n        } finally {\n            loading.value = false;\n        }\n    }\n\n    async function deleteCategory(id) {\n        loading.value = true;\n        error.value = null;\n\n        try {\n            await categoriesAPI.delete(id);\n\n            // Remove from the categories array\n            categories.value = categories.value.filter((c) => c.id !== id);\n\n            // Clear currentCategory if it's the one being deleted\n            if (currentCategory.value && currentCategory.value.id === id) {\n                currentCategory.value = null;\n            }\n        } catch (err) {\n            error.value = err.message ||\n                `Failed to delete category with ID ${id}`;\n            console.error(`Error deleting category ${id}:`, err);\n            throw err;\n        } finally {\n            loading.value = false;\n        }\n    }\n\n    return {\n        // State\n        categories,\n        loading,\n        error,\n        currentCategory,\n        currentCategoryLoading,\n\n        // Getters\n        categoriesSorted,\n        categoryById,\n\n        // Actions\n        fetchCategories,\n        fetchCategory,\n        createCategory,\n        updateCategory,\n        deleteCategory,\n    };\n});\n"],"names":["useCategoriesStore","defineStore","categories","ref","loading","error","currentCategory","currentCategoryLoading","categoriesSorted","computed","a","b","categoryById","id","cat","fetchCategories","response","categoriesAPI","err","fetchCategory","fetchedCategory","index","c","createCategory","categoryData","newCategory","existingIndex","updateCategory","updateMask","formattedUpdateMask","updatedCategory","deleteCategory"],"mappings":"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"}