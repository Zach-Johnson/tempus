{"version":3,"file":"NewSessionView-1ab41abf.js","sources":["../../src/stores/history.js","../../src/components/exercises/ExerciseCard.vue","../../src/components/exercises/ExerciseList.vue","../../src/views/sessions/NewSessionView.vue"],"sourcesContent":["import { historyAPI } from \"@/services/api\";\nimport { defineStore } from \"pinia\";\nimport { computed, ref } from \"vue\";\n\nexport const useHistoryStore = defineStore(\"history\", () => {\n    // State\n    const historyEntries = ref([]);\n    const loading = ref(false);\n    const error = ref(null);\n    const currentHistoryEntry = ref(null);\n    const currentHistoryLoading = ref(false);\n\n    // Getters\n    const entriesSortedByDate = computed(\n        () => {\n            return [...historyEntries.value].sort(\n                (a, b) => { // Sort by start_time in descending order (newest first)\n                    return new Date(b.start_time) - new Date(a.start_time);\n                },\n            );\n        },\n    );\n\n    const entriesByExercise = computed(\n        () => {\n            return (exerciseId) =>\n                historyEntries.value.filter(\n                    (entry) => entry.exercise_id === exerciseId,\n                );\n        },\n    );\n\n    const entriesBySession = computed(\n        () => {\n            return (sessionId) =>\n                historyEntries.value.filter(\n                    (entry) => entry.session_id === sessionId,\n                );\n        },\n    );\n\n    const entriesByDateRange = computed(() => {\n        return (startDate, endDate) => {\n            const start = startDate ? new Date(startDate) : null;\n            const end = endDate ? new Date(endDate) : null;\n\n            return historyEntries.value.filter((entry) => {\n                const entryDate = new Date(entry.start_time);\n\n                if (start && end) {\n                    return entryDate >= start && entryDate <= end;\n                } else if (start) {\n                    return entryDate >= start;\n                } else if (end) {\n                    return entryDate <= end;\n                }\n\n                return true;\n            });\n        };\n    });\n\n    // Actions\n    async function fetchHistoryEntries(params = {}) {\n        loading.value = true;\n        error.value = null;\n\n        try {\n            const response = await historyAPI.getAll(params);\n            historyEntries.value = response.data.history_entries || [];\n        } catch (err) {\n            error.value = err.message || \"Failed to fetch history entries\";\n            console.error(\"Error fetching history entries:\", err);\n        } finally {\n            loading.value = false;\n        }\n    }\n\n    async function fetchHistoryEntry(id) {\n        currentHistoryLoading.value = true;\n        error.value = null;\n\n        try {\n            const response = await historyAPI.get(id);\n            currentHistoryEntry.value = response.data;\n\n            // Also update the entry in the historyEntries array if it exists\n            const index = historyEntries.value.findIndex((entry) =>\n                entry.id === id\n            );\n            if (index !== -1) {\n                historyEntries.value[index] = response.data;\n            } else {\n                historyEntries.value.push(response.data);\n            }\n        } catch (err) {\n            error.value = err.message ||\n                `Failed to fetch history entry with ID ${id}`;\n            console.error(`Error fetching history entry ${id}:`, err);\n        } finally {\n            currentHistoryLoading.value = false;\n        }\n    }\n\n    async function createHistoryEntry(entryData) {\n        loading.value = true;\n        error.value = null;\n\n        try {\n            const response = await historyAPI.create(entryData);\n            const newEntry = response.data;\n            historyEntries.value.push(newEntry);\n            return newEntry;\n        } catch (err) {\n            error.value = err.message || \"Failed to create history entry\";\n            console.error(\"Error creating history entry:\", err);\n            throw err;\n        } finally {\n            loading.value = false;\n        }\n    }\n\n    async function updateHistoryEntry(id, entryData, updateMask) {\n        loading.value = true;\n        error.value = null;\n\n        try {\n            // Convert paths array to comma-separated string if it's in object\n            // format\n            let formattedUpdateMask = updateMask;\n            if (\n                updateMask && typeof updateMask === \"object\" && updateMask.paths\n            ) {\n                formattedUpdateMask = updateMask.paths.join(\",\");\n            }\n\n            const response = await historyAPI.update(\n                id,\n                entryData,\n                formattedUpdateMask,\n            );\n            const updatedEntry = response.data;\n\n            // Update in the historyEntries array\n            const index = historyEntries.value.findIndex((entry) =>\n                entry.id === id\n            );\n            if (index !== -1) {\n                historyEntries.value[index] = updatedEntry;\n            }\n\n            // Update currentHistoryEntry if it's the one being edited\n            if (\n                currentHistoryEntry.value && currentHistoryEntry.value.id === id\n            ) {\n                currentHistoryEntry.value = updatedEntry;\n            }\n\n            return updatedEntry;\n        } catch (err) {\n            error.value = err.message ||\n                `Failed to update history entry with ID ${id}`;\n            console.error(`Error updating history entry ${id}:`, err);\n            throw err;\n        } finally {\n            loading.value = false;\n        }\n    }\n\n    async function deleteHistoryEntry(id) {\n        loading.value = true;\n        error.value = null;\n\n        try {\n            await historyAPI.delete(id);\n\n            // Remove from the historyEntries array\n            historyEntries.value = historyEntries.value.filter((entry) =>\n                entry.id !== id\n            );\n\n            // Clear currentHistoryEntry if it's the one being deleted\n            if (\n                currentHistoryEntry.value && currentHistoryEntry.value.id === id\n            ) {\n                currentHistoryEntry.value = null;\n            }\n        } catch (err) {\n            error.value = err.message ||\n                `Failed to delete history entry with ID ${id}`;\n            console.error(`Error deleting history entry ${id}:`, err);\n            throw err;\n        } finally {\n            loading.value = false;\n        }\n    }\n\n    // Helper for calculating stats from history entries\n    function calculateBpmProgress(exerciseId) {\n        const entries = entriesByExercise.value(exerciseId);\n\n        if (!entries.length) return [];\n\n        // Sort by date, oldest first\n        const sorted = [...entries].sort(\n            (a, b) => new Date(a.start_time) - new Date(b.start_time),\n        );\n\n        // Group by day and take the highest BPM for each day\n        const progressByDay = {};\n\n        sorted.forEach((entry) => {\n            const date = new Date(entry.start_time)\n                .toISOString()\n                .split(\"T\")[0];\n\n            if (\n                !progressByDay[date] ||\n                entry.bpm > progressByDay[date]\n            ) {\n                progressByDay[date] = entry.bpm;\n            }\n        });\n\n        // Convert to array of points\n        return Object.entries(progressByDay).map(([date, bpm]) => ({\n            date,\n            bpm,\n        }));\n    }\n\n    return {\n        // State\n        historyEntries,\n        loading,\n        error,\n        currentHistoryEntry,\n        currentHistoryLoading,\n\n        // Getters\n        entriesSortedByDate,\n        entriesByExercise,\n        entriesBySession,\n        entriesByDateRange,\n\n        // Actions\n        fetchHistoryEntries,\n        fetchHistoryEntry,\n        createHistoryEntry,\n        updateHistoryEntry,\n        deleteHistoryEntry,\n\n        // Helper functions\n        calculateBpmProgress,\n    };\n});\n","<template>\n  <v-card\n    class=\"exercise-card\"\n    :to=\"selectable ? undefined : computedTo\"\n    :flat=\"flat\"\n    :variant=\"variant\"\n    @click=\"handleClick\"\n    :class=\"{ 'selected-exercise': selected }\"\n  >\n    <v-card-title class=\"text-subtitle-1\">\n      {{ exercise.name }}\n    </v-card-title>\n    \n    <v-card-text>\n      <p v-if=\"exercise.description\" class=\"text-body-2 mb-2\">\n        {{ truncateText(exercise.description, 100) }}\n      </p>\n      \n      <div v-if=\"showCategories && exercise.categoryIds && exercise.categoryIds.length > 0\" class=\"mb-2\">\n        <span class=\"text-caption text-grey\">\n          {{ exercise.categoryIds.length }} {{ exercise.categoryIds.length === 1 ? 'category' : 'categories' }}\n        </span>\n      </div>\n      \n      <div v-if=\"showTags && exercise.tagIds && exercise.tagIds.length > 0\">\n        <span class=\"text-caption text-grey\">\n          {{ exercise.tagIds.length }} {{ exercise.tagIds.length === 1 ? 'tag' : 'tags' }}\n        </span>\n      </div>\n    </v-card-text>\n    \n    <slot name=\"actions\">\n      <v-card-actions v-if=\"selectable\">\n        <v-spacer></v-spacer>\n        <v-btn \n          variant=\"text\"\n          :color=\"selected ? 'error' : 'primary'\"\n          size=\"small\"\n        >\n          {{ selected ? 'Remove' : 'Add' }}\n        </v-btn>\n      </v-card-actions>\n    </slot>\n  </v-card>\n</template>\n\n<script setup>\nimport { computed } from 'vue'\nimport { useCategoriesStore } from '@/stores/categories.js'\nimport { useTagsStore } from '@/stores/tags.js'\n\nconst props = defineProps({\n  exercise: {\n    type: Object,\n    required: true\n  },\n  to: {\n    type: [String, Object],\n    default: null\n  },\n  flat: {\n    type: Boolean,\n    default: false\n  },\n  variant: {\n    type: String,\n    default: 'elevated' // elevated, flat, tonal, outlined, etc.\n  },\n  showCategories: {\n    type: Boolean,\n    default: true\n  },\n  showTags: {\n    type: Boolean,\n    default: true\n  },\n  selected: {\n    type: Boolean,\n    default: false\n  },\n  selectable: {\n    type: Boolean,\n    default: false\n  }\n})\n\nconst emit = defineEmits(['click'])\n\n// Computed props\nconst computedTo = computed(() => {\n  if (props.to) return props.to\n  return props.exercise && props.exercise.id \n    ? { name: 'exercise-detail', params: { id: props.exercise.id } }\n    : null\n})\n\n// Stores\nconst categoriesStore = useCategoriesStore()\nconst tagsStore = useTagsStore()\n\n// Methods\nfunction truncateText(text, maxLength) {\n  if (!text) return ''\n  return text.length > maxLength \n    ? text.substring(0, maxLength) + '...' \n    : text\n}\n\nfunction handleClick() {\n  emit('click', props.exercise)\n}\n\n// These functions are no longer used in the simplified template\nfunction getCategoryById(categoryId) {\n  return categoriesStore.categoryById(categoryId)\n}\n\nfunction getTagById(tagId) {\n  return tagsStore.tagById(tagId)\n}\n</script>\n\n<style scoped>\n.exercise-card {\n  height: 100%;\n  transition: transform 0.2s;\n  cursor: pointer;\n}\n\n.exercise-card:hover {\n  transform: translateY(-2px);\n}\n\n.selected-exercise {\n  border: 2px solid rgb(var(--v-theme-primary)) !important;\n  background-color: rgba(var(--v-theme-primary), 0.05);\n}\n</style>\n","<template>\n  <div class=\"exercise-list\">\n    <div v-if=\"loading\" class=\"d-flex align-center\">\n      <v-progress-circular indeterminate size=\"20\" width=\"2\" color=\"primary\" class=\"mr-2\"></v-progress-circular>\n      <span class=\"text-body-2\">Loading exercises...</span>\n    </div>\n    \n    <div v-else-if=\"!exercises || exercises.length === 0\" class=\"text-body-2 text-grey\">\n      {{ noExercisesMessage }}\n    </div>\n    \n    <div v-else>\n      <div v-if=\"displayType === 'table'\" class=\"exercise-table-container\">\n        <v-data-table\n          :headers=\"tableHeaders\"\n          :items=\"exercises\"\n          :items-per-page=\"itemsPerPage\"\n          density=\"compact\"\n          class=\"elevation-1\"\n        >\n          <template v-slot:item.description=\"{ item }\">\n            <span v-if=\"item.description\">{{ truncateText(item.description, 80) }}</span>\n            <span v-else class=\"text-grey\">No description</span>\n          </template>\n          \n          <template v-slot:item.categories=\"{ item }\">\n            <v-chip-group>\n              <template v-for=\"categoryId in item.categoryIds || []\" :key=\"categoryId\">\n                <span v-if=\"getCategoryById(categoryId)\" class=\"text-caption\">\n                  {{ getCategoryById(categoryId).name }}\n                </span>\n              </template>\n            </v-chip-group>\n          </template>\n          \n          <template v-slot:item.tags=\"{ item }\">\n            <v-chip-group>\n              <template v-for=\"tagId in item.tagIds || []\" :key=\"tagId\">\n                <span v-if=\"getTagById(tagId)\" class=\"text-caption\">\n                  {{ getTagById(tagId).name }}\n                </span>\n              </template>\n            </v-chip-group>\n          </template>\n          \n          <template v-slot:item.actions=\"{ item }\">\n            <v-btn\n              icon\n              variant=\"text\"\n              size=\"small\"\n              color=\"primary\"\n              :to=\"allowSelect ? undefined : { name: 'exercise-detail', params: { id: item.id }}\"\n              class=\"mr-1\"\n              @click=\"allowSelect ? selectExercise(item) : undefined\"\n            >\n              <v-icon>{{ allowSelect ? 'mdi-plus' : 'mdi-eye' }}</v-icon>\n            </v-btn>\n            \n            <v-btn\n              v-if=\"allowSelect\"\n              icon\n              variant=\"text\"\n              size=\"small\"\n              color=\"primary\"\n              @click=\"selectExercise(item)\"\n            >\n              <v-icon>mdi-plus</v-icon>\n            </v-btn>\n          </template>\n        </v-data-table>\n      </div>\n      \n      <div v-else-if=\"displayType === 'list'\" class=\"exercise-list-container\">\n        <v-list density=\"compact\">\n          <v-list-item\n            v-for=\"exercise in exercises\"\n            :key=\"exercise.id\"\n            :to=\"allowSelect ? undefined : { name: 'exercise-detail', params: { id: exercise.id }}\"\n            @click=\"allowSelect ? selectExercise(exercise) : undefined\"\n          >\n            <template v-slot:prepend>\n              <v-avatar size=\"32\" color=\"primary\" class=\"text-white\">\n                {{ exercise.name.charAt(0).toUpperCase() }}\n              </v-avatar>\n            </template>\n            \n            <v-list-item-title>{{ exercise.name }}</v-list-item-title>\n            <v-list-item-subtitle v-if=\"exercise.description\">\n              {{ truncateText(exercise.description, 60) }}\n            </v-list-item-subtitle>\n          </v-list-item>\n        </v-list>\n      </div>\n      \n      <div v-else class=\"exercise-grid-container\">\n        <v-row>\n          <v-col \n            v-for=\"exercise in exercises\" \n            :key=\"exercise.id\"\n            cols=\"12\"\n            sm=\"6\"\n            md=\"4\"\n            lg=\"3\"\n          >\n            <exercise-card\n              :exercise=\"exercise\"\n              :to=\"allowSelect ? undefined : { name: 'exercise-detail', params: { id: exercise.id }}\"\n              variant=\"outlined\"\n              @click=\"handleCardClick(exercise)\"\n              :selected=\"isExerciseSelected(exercise)\"\n              :selectable=\"allowSelect\"\n            ></exercise-card>\n          </v-col>\n        </v-row>\n      </div>\n      \n      <div v-if=\"showPagination && totalCount > itemsPerPage\" class=\"pagination-container mt-4\">\n        <v-pagination\n          v-model=\"localPage\"\n          :length=\"Math.ceil(totalCount / itemsPerPage)\"\n          :total-visible=\"7\"\n        ></v-pagination>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, watch, onMounted } from 'vue'\nimport { useExercisesStore } from '@/stores/exercises.js'\nimport { useCategoriesStore } from '@/stores/categories.js'\nimport { useTagsStore } from '@/stores/tags.js'\nimport ExerciseCard from '@/components/exercises/ExerciseCard.vue'\n\nconst props = defineProps({\n  exercises: {\n    type: Array,\n    default: () => []\n  },\n  categoryId: {\n    type: [Number, String],\n    default: null\n  },\n  tagId: {\n    type: [Number, String],\n    default: null\n  },\n  loading: {\n    type: Boolean,\n    default: false\n  },\n  displayType: {\n    type: String,\n    default: 'table',  // 'table', 'list', or 'grid'\n    validator: (value) => ['table', 'list', 'grid'].includes(value)\n  },\n  noExercisesMessage: {\n    type: String,\n    default: 'No exercises available'\n  },\n  showPagination: {\n    type: Boolean,\n    default: false\n  },\n  totalCount: {\n    type: Number,\n    default: 0\n  },\n  itemsPerPage: {\n    type: Number,\n    default: 10\n  },\n  page: {\n    type: Number,\n    default: 1\n  },\n  selectable: {\n    type: Boolean,\n    default: false\n  },\n  allowSelect: {\n    type: Boolean, \n    default: false\n  },\n  selectedExerciseIds: {\n    type: Array,\n    default: () => []\n  }\n})\n\nconst emit = defineEmits(['update:page', 'select-exercise'])\n\n// Store access\nconst exercisesStore = useExercisesStore()\nconst categoriesStore = useCategoriesStore()\nconst tagsStore = useTagsStore()\n\n// Local state\nconst localPage = ref(props.page)\n\n// Table headers\nconst tableHeaders = [\n  { title: 'Name', key: 'name' },\n  { title: 'Description', key: 'description' },\n  { title: 'Categories', key: 'categories' },\n  { title: 'Tags', key: 'tags' },\n  { title: 'Actions', key: 'actions', sortable: false, align: 'end' }\n]\n\n// Watch for changes in page\nwatch(localPage, (newPage) => {\n  emit('update:page', newPage)\n})\n\n// Watch for changes in page prop\nwatch(() => props.page, (newPage) => {\n  localPage.value = newPage\n})\n\n// Methods\nfunction truncateText(text, maxLength) {\n  if (!text) return ''\n  return text.length > maxLength \n    ? text.substring(0, maxLength) + '...' \n    : text\n}\n\nfunction getCategoryById(categoryId) {\n  return categoriesStore.categoryById(categoryId)\n}\n\nfunction getTagById(tagId) {\n  return tagsStore.tagById(tagId)\n}\n\nfunction selectExercise(exercise) {\n  emit('select-exercise', exercise)\n}\n\nfunction isExerciseSelected(exercise) {\n  return props.selectedExerciseIds.includes(exercise.id)\n}\n\nfunction handleCardClick(exercise) {\n  if (props.allowSelect) {\n    // If in select mode, just emit the selection event\n    selectExercise(exercise)\n  }\n  // If not in select mode, the to property will handle navigation\n}\n\n// Ensure categories and tags are loaded\nonMounted(async () => {\n  if (categoriesStore.categories.length === 0) {\n    await categoriesStore.fetchCategories()\n  }\n  \n  if (tagsStore.tags.length === 0) {\n    await tagsStore.fetchTags()\n  }\n})\n</script>\n\n<style scoped>\n.exercise-table-container,\n.exercise-list-container,\n.exercise-grid-container {\n  width: 100%;\n}\n\n.pagination-container {\n  display: flex;\n  justify-content: center;\n}\n</style>\n","<template>\n  <div>\n    <v-row class=\"mb-4\">\n      <v-col cols=\"12\" sm=\"8\">\n        <h1 class=\"text-h3\">New Practice Session</h1>\n        <p class=\"text-body-1\">Start tracking your practice time</p>\n      </v-col>\n      <v-col cols=\"12\" sm=\"4\" class=\"d-flex justify-end align-center\">\n        <v-btn\n          v-if=\"!sessionStarted\"\n          color=\"primary\"\n          prepend-icon=\"mdi-play\"\n          :loading=\"startingSession\"\n          @click=\"startSession\"\n        >\n          Start Session\n        </v-btn>\n        <v-btn\n          v-else\n          color=\"success\"\n          prepend-icon=\"mdi-check\"\n          :loading=\"finishingSession\"\n          @click=\"finishSession\"\n        >\n          Finish Session\n        </v-btn>\n      </v-col>\n    </v-row>\n\n    <v-card class=\"mb-4\">\n      <v-card-text>\n        <v-row>\n          <v-col cols=\"12\" md=\"6\">\n            <div class=\"text-h6 mb-2\">Session Details</div>\n            <v-row>\n              <v-col cols=\"12\">\n                <v-text-field\n                  v-model=\"notes\"\n                  label=\"Session Notes\"\n                  variant=\"outlined\"\n                  rows=\"2\"\n                  placeholder=\"Add notes about this practice session (optional)\"\n                  :disabled=\"finishingSession\"\n                ></v-text-field>\n              </v-col>\n            </v-row>\n\n            <div class=\"text-subtitle-1 font-weight-medium mb-1\">\n              Start Time:\n              <span v-if=\"sessionStarted\" class=\"font-weight-regular\">\n                {{ formatDateTime(startTime) }}\n              </span>\n              <span v-else class=\"font-weight-regular text-grey\">\n                Not started yet\n              </span>\n            </div>\n\n            <div class=\"text-subtitle-1 font-weight-medium mb-1\">\n              Current Duration:\n              <span class=\"font-weight-regular\" v-if=\"sessionStarted\">\n                {{ sessionDuration }}\n              </span>\n              <span v-else class=\"font-weight-regular text-grey\">\n                0:00:00\n              </span>\n            </div>\n          </v-col>\n\n          <v-col cols=\"12\" md=\"6\">\n            <div class=\"text-h6 mb-2\">Exercises in this Session</div>\n            <v-skeleton-loader\n              v-if=\"loadingSessionExercises\"\n              type=\"list-item-two-line\"\n              :loading=\"loadingSessionExercises\"\n            ></v-skeleton-loader>\n\n            <div v-else-if=\"sessionExercises.length === 0\" class=\"text-center pa-4\">\n              <v-icon icon=\"mdi-music-note-off\" size=\"64\" color=\"grey-lighten-1\" class=\"mb-2\"></v-icon>\n              <p class=\"text-body-2 text-grey\">No exercises added yet</p>\n              <v-btn\n                color=\"primary\"\n                prepend-icon=\"mdi-plus\"\n                variant=\"text\"\n                @click=\"openAddExerciseDialog\"\n                :disabled=\"!sessionStarted\"\n              >\n                Add Exercises\n              </v-btn>\n            </div>\n\n            <div v-else>\n              <v-expansion-panels variant=\"accordion\">\n                <v-expansion-panel\n                  v-for=\"(exercise, index) in sessionExercises\"\n                  :key=\"exercise.id\"\n                >\n                  <v-expansion-panel-title>\n                    <div class=\"d-flex align-center\">\n                      <span>{{ exercise.name }}</span>\n                      <v-chip \n                        size=\"small\" \n                        class=\"ml-2\" \n                        :color=\"getExerciseStatusColor(exercise)\"\n                      >\n                        {{ getExerciseStatus(exercise) }}\n                      </v-chip>\n                      <span v-if=\"exercise.duration\" class=\"ml-2 text-caption\">\n                        {{ exercise.duration }}\n                      </span>\n                    </div>\n\n                    <template v-slot:actions>\n                      <v-btn\n                        icon\n                        variant=\"text\"\n                        size=\"small\"\n                        color=\"error\"\n                        @click.stop=\"removeExercise(exercise)\"\n                        :disabled=\"exercise.isActive\"\n                      >\n                        <v-icon>mdi-delete</v-icon>\n                      </v-btn>\n                    </template>\n                  </v-expansion-panel-title>\n                  <v-expansion-panel-text>\n                    <v-row>\n                      <v-col cols=\"12\" md=\"6\">\n                        <v-combobox\n                          v-model=\"exercise.bpms\"\n                          label=\"BPMs\"\n                          multiple\n                          chips\n                          hide-selected\n                          clearable\n                          variant=\"outlined\"\n                          hide-details\n                          class=\"mb-4\"\n                          :disabled=\"!sessionStarted || !exercise.isActive\"\n                          placeholder=\"Enter BPM values (e.g. 100, 120)\"\n                          @update:model-value=\"validateBpms(exercise)\"\n                        />\n                      </v-col>\n                      <v-col cols=\"12\" md=\"6\">\n                        <v-select\n                          v-model=\"exercise.timeSignature\"\n                          :items=\"timeSignatureOptions\"\n                          label=\"Time Signature\"\n                          variant=\"outlined\"\n                          hide-details\n                          class=\"mb-4\"\n                          :disabled=\"!sessionStarted || !exercise.isActive\"\n                        ></v-select>\n                      </v-col>\n                      <v-col cols=\"12\">\n                        <v-textarea\n                          v-model=\"exercise.notes\"\n                          label=\"Notes for this exercise\"\n                          variant=\"outlined\"\n                          rows=\"2\"\n                          placeholder=\"Add specific notes about this exercise (optional)\"\n                          hide-details\n                          :disabled=\"!sessionStarted || !exercise.isActive\"\n                        ></v-textarea>\n                      </v-col>\n                      <v-col cols=\"12\" class=\"d-flex justify-end\">\n                        <v-btn\n                          v-if=\"!exercise.isActive && !exercise.completed\"\n                          color=\"primary\"\n                          prepend-icon=\"mdi-play\"\n                          @click=\"startExercisePractice(exercise)\"\n                          :disabled=\"!sessionStarted || (hasActiveExercise && !exercise.isActive)\"\n                        >\n                          Start Practice\n                        </v-btn>\n                        <v-btn\n                          v-else-if=\"exercise.isActive\"\n                          color=\"error\"\n                          prepend-icon=\"mdi-stop\"\n                          @click=\"stopExercisePractice(exercise)\"\n                        >\n                          Stop Practice\n                        </v-btn>\n                        <v-btn\n                          v-else\n                          color=\"success\"\n                          prepend-icon=\"mdi-check\"\n                          disabled\n                        >\n                          Completed\n                        </v-btn>\n                      </v-col>\n                    </v-row>\n                  </v-expansion-panel-text>\n                </v-expansion-panel>\n              </v-expansion-panels>\n\n              <div class=\"d-flex justify-end mt-2\">\n                <v-btn\n                  color=\"primary\"\n                  prepend-icon=\"mdi-plus\"\n                  variant=\"text\"\n                  @click=\"openAddExerciseDialog\"\n                  :disabled=\"!sessionStarted\"\n                >\n                  Add More\n                </v-btn>\n              </div>\n            </div>\n          </v-col>\n        </v-row>\n      </v-card-text>\n    </v-card>\n\n    <!-- Exercise search and selection -->\n    <v-card class=\"mb-4\">\n      <v-card-title>\n        <div class=\"text-h6\">Choose Exercises</div>\n      </v-card-title>\n\n      <v-card-text>\n        <!-- Filters -->\n        <v-row>\n          <v-col cols=\"12\" sm=\"4\">\n            <v-text-field\n              v-model=\"exerciseSearch\"\n              label=\"Search exercises\"\n              variant=\"outlined\"\n              density=\"compact\"\n              prepend-inner-icon=\"mdi-magnify\"\n              hide-details\n              clearable\n            ></v-text-field>\n          </v-col>\n          <v-col cols=\"12\" sm=\"4\">\n            <v-select\n              v-model=\"categoryFilter\"\n              :items=\"categoriesForSelect\"\n              label=\"Filter by category\"\n              variant=\"outlined\"\n              density=\"compact\"\n              hide-details\n              clearable\n            ></v-select>\n          </v-col>\n          <v-col cols=\"12\" sm=\"4\">\n            <v-select\n              v-model=\"tagFilter\"\n              :items=\"tagsForSelect\"\n              label=\"Filter by tag\"\n              variant=\"outlined\"\n              density=\"compact\"\n              hide-details\n              clearable\n            ></v-select>\n          </v-col>\n        </v-row>\n\n        <!-- Exercise List -->\n        <exercise-list\n          :exercises=\"filteredExercises\"\n          :loading=\"exercisesStore.loading\"\n          display-type=\"grid\"\n          :allow-select=\"true\"\n          @select-exercise=\"toggleExerciseInSession\"\n          :selected-exercise-ids=\"sessionExerciseIds\"\n          class=\"mt-4\"\n        />\n      </v-card-text>\n    </v-card>\n\n    <!-- Add Exercise Dialog -->\n    <v-dialog v-model=\"addExerciseDialog\" max-width=\"800\">\n      <v-card>\n        <v-card-title>Add Exercises to Session</v-card-title>\n        <v-card-text>\n          <v-row>\n            <v-col cols=\"12\" sm=\"4\">\n              <v-text-field\n                v-model=\"dialogExerciseSearch\"\n                label=\"Search exercises\"\n                variant=\"outlined\"\n                density=\"compact\"\n                prepend-inner-icon=\"mdi-magnify\"\n                hide-details\n                clearable\n                class=\"mb-4\"\n              ></v-text-field>\n            </v-col>\n            <v-col cols=\"12\" sm=\"4\">\n              <v-select\n                v-model=\"dialogCategoryFilter\"\n                :items=\"categoriesForSelect\"\n                label=\"Filter by category\"\n                variant=\"outlined\"\n                density=\"compact\"\n                hide-details\n                clearable\n              ></v-select>\n            </v-col>\n            <v-col cols=\"12\" sm=\"4\">\n              <v-select\n                v-model=\"dialogTagFilter\"\n                :items=\"tagsForSelect\"\n                label=\"Filter by tag\"\n                variant=\"outlined\"\n                density=\"compact\"\n                hide-details\n                clearable\n              ></v-select>\n            </v-col>\n          </v-row>\n\n          <exercise-list\n            :exercises=\"dialogFilteredExercises\"\n            :loading=\"exercisesStore.loading\"\n            display-type=\"grid\"\n            :allow-select=\"true\"\n            @select-exercise=\"toggleExerciseInSession\"\n            :selected-exercise-ids=\"sessionExerciseIds\"\n            class=\"mt-4\"\n          />\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"primary\" variant=\"text\" @click=\"addExerciseDialog = false\">\n            Done\n          </v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n\n    <!-- Cancel Session Dialog -->\n    <v-dialog v-model=\"cancelDialog\" max-width=\"500\">\n      <v-card>\n        <v-card-title class=\"text-h5\">Cancel Session?</v-card-title>\n        <v-card-text>\n          Are you sure you want to cancel this practice session? All progress will be lost.\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"grey-darken-1\" variant=\"text\" @click=\"cancelDialog = false\">No, Continue</v-btn>\n          <v-btn \n            color=\"error\" \n            variant=\"flat\" \n            @click=\"confirmCancelSession\"\n          >\n            Yes, Cancel Session\n          </v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n\n    <!-- Finish Session Form Dialog -->\n    <v-dialog v-model=\"finishSessionDialog\" max-width=\"600\" persistent>\n      <v-card>\n        <v-card-title class=\"text-h5\">Complete Practice Session</v-card-title>\n        <v-card-text>\n          <v-form ref=\"finishForm\" v-model=\"finishFormValid\">\n            <v-textarea\n              v-model=\"notes\"\n              label=\"Session Notes\"\n              variant=\"outlined\"\n              rows=\"4\"\n              placeholder=\"Add any final notes about this practice session (optional)\"\n              class=\"mb-4\"\n            ></v-textarea>\n            \n            <p class=\"text-body-2 mt-4\">\n              This will complete your practice session with {{ sessionExercises.length }} exercises \n              and a total duration of {{ sessionDuration }}.\n            </p>\n          </v-form>\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"grey-darken-1\" variant=\"text\" @click=\"finishSessionDialog = false\">\n            Back to Session\n          </v-btn>\n          <v-btn\n            color=\"success\"\n            variant=\"flat\"\n            @click=\"completeSession\"\n            :loading=\"finishingSession\"\n          >\n            Complete Session\n          </v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted, onBeforeUnmount, watch } from 'vue'\nimport { useRouter, useRoute } from 'vue-router'\nimport { useExercisesStore } from '@/stores/exercises.js'\nimport { useCategoriesStore } from '@/stores/categories.js'\nimport { useTagsStore } from '@/stores/tags.js'\nimport { useSessionsStore } from '@/stores/sessions.js'\nimport { useHistoryStore } from '@/stores/history.js'\nimport { useAppStore } from '@/stores/app.js'\nimport CategoryChip from '@/components/categories/CategoryChip.vue'\nimport TagChip from '@/components/tags/TagChip.vue'\nimport ExerciseList from '@/components/exercises/ExerciseList.vue'\n\nconst router = useRouter()\nconst route = useRoute()\nconst exercisesStore = useExercisesStore()\nconst categoriesStore = useCategoriesStore()\nconst tagsStore = useTagsStore()\nconst sessionsStore = useSessionsStore()\nconst historyStore = useHistoryStore()\nconst appStore = useAppStore()\n\n// Data for session\nconst sessionStarted = ref(false)\nconst startTime = ref(null)\nconst notes = ref('')\nconst sessionExercises = ref([])\nconst startingSession = ref(false)\nconst finishingSession = ref(false)\nconst loadingSessionExercises = ref(false)\nconst sessionDuration = ref('0:00:00')\nconst durationInterval = ref(null)\nconst sessionId = ref(null)\n\n// Dialog controls\nconst addExerciseDialog = ref(false)\nconst dialogExerciseSearch = ref('')\nconst dialogCategoryFilter = ref(null)\nconst dialogTagFilter = ref(null)\nconst exerciseSearch = ref('')\nconst categoryFilter = ref(null)\nconst tagFilter = ref(null)\nconst cancelDialog = ref(false)\nconst finishSessionDialog = ref(false)\nconst finishForm = ref(null)\nconst finishFormValid = ref(true)\n\n// Time signature options\nconst timeSignatureOptions = [\n  '4/4', '3/4', '2/4', '6/8', '7/8', '5/4', '9/8', '12/8'\n]\n\n// Exercise tracking\nconst hasActiveExercise = computed(() => {\n  return sessionExercises.value.some(ex => ex.isActive)\n})\n\n// Computed properties\nconst sessionExerciseIds = computed(() => {\n  return sessionExercises.value.map(exercise => exercise.id)\n})\n\nconst filteredExercises = computed(() => {\n  let result = exercisesStore.exercises\n  \n  // Search filter\n  if (exerciseSearch.value) {\n    const searchLower = exerciseSearch.value.toLowerCase()\n    result = result.filter(exercise => \n      exercise.name.toLowerCase().includes(searchLower) || \n      (exercise.description && exercise.description.toLowerCase().includes(searchLower))\n    )\n  }\n  \n  // Category filter\n  if (categoryFilter.value) {\n    result = result.filter(exercise => \n      exercise.categoryIds && exercise.categoryIds.includes(parseInt(categoryFilter.value))\n    )\n  }\n  \n  // Tag filter\n  if (tagFilter.value) {\n    result = result.filter(exercise => \n      exercise.tagIds && exercise.tagIds.includes(parseInt(tagFilter.value))\n    )\n  }\n  \n  return result\n})\n\nconst dialogFilteredExercises = computed(() => {\n  let result = exercisesStore.exercises\n  \n  // Search filter\n  if (dialogExerciseSearch.value) {\n    const search = dialogExerciseSearch.value.toLowerCase()\n    result = result.filter(exercise => \n      exercise.name.toLowerCase().includes(search) || \n      (exercise.description && exercise.description.toLowerCase().includes(search))\n    )\n  }\n  \n  // Category filter\n  if (dialogCategoryFilter.value) {\n    result = result.filter(exercise => \n      exercise.categoryIds && exercise.categoryIds.includes(parseInt(dialogCategoryFilter.value))\n    )\n  }\n  \n  // Tag filter\n  if (dialogTagFilter.value) {\n    result = result.filter(exercise => \n      exercise.tagIds && exercise.tagIds.includes(parseInt(dialogTagFilter.value))\n    )\n  }\n  \n  return result\n})\n\nconst categoriesForSelect = computed(() => {\n  return categoriesStore.categories.map(category => ({\n    title: category.name,\n    value: category.id\n  }))\n})\n\nconst tagsForSelect = computed(() => {\n  return tagsStore.tags.map(tag => ({\n    title: tag.name,\n    value: tag.id\n  }))\n})\n\n// Methods\nfunction formatDateTime(dateTime) {\n  if (!dateTime) return ''\n  return appStore.formatDateTime(dateTime)\n}\n\nfunction formatTime(time) {\n  if (!time) return ''\n  \n  const date = new Date(time)\n  return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\n}\n\nfunction getCategoryById(categoryId) {\n  const category = categoriesStore.categoryById(categoryId)\n  return category // This may return undefined if category is not found\n}\n\nfunction getTagById(tagId) {\n  return tagsStore.tagById(tagId)\n}\n\nfunction isExerciseInSession(exercise) {\n  return sessionExercises.value.some(e => e.id === exercise.id)\n}\n\nfunction getExerciseStatus(exercise) {\n  if (exercise.isActive) return 'Active'\n  if (exercise.completed) return 'Completed'\n  return 'Pending'\n}\n\nfunction getExerciseStatusColor(exercise) {\n  if (exercise.isActive) return 'success'\n  if (exercise.completed) return 'primary'\n  return 'grey'\n}\n\nfunction addExerciseToSession(exercise) {\n  if (isExerciseInSession(exercise)) {\n    removeExercise(exercise)\n    return\n  }\n  \n  // Add the exercise with default values and current time\n  sessionExercises.value.push({\n    ...exercise,\n    addedAt: new Date(),\n    bpms: [], // Empty initially so user can set it\n    timeSignature: '4/4', // Default time signature\n    notes: '', // Empty initially for user input\n    startTime: null,\n    endTime: null,\n    isActive: false,\n    completed: false,\n    duration: null\n  })\n  \n  appStore.showSuccessMessage(`Added ${exercise.name} to session`)\n}\n\nfunction toggleExerciseInSession(exercise) {\n  if (isExerciseInSession(exercise)) {\n    removeExercise(exercise)\n  } else {\n    addExerciseToSession(exercise)\n  }\n}\n\nasync function removeExercise(exercise) {\n  // The exercise passed in may come from one of the sub-components, which doesn't have the full local context\n  // of the hisotryID\n  const fullExercise = sessionExercises.value.find(e => e.id === exercise.id)\n\n  // Don't allow removing active exercises\n  if (exercise.isActive) {\n    appStore.showWarningMessage(`Can't remove an active exercise. Stop it first.`)\n    return\n  }\n  \n  sessionExercises.value = sessionExercises.value.filter(e => e.id !== exercise.id)\n\n  // Also remove from the backend\n  if (fullExercise.completed && fullExercise.historyID) {\n      await historyStore.deleteHistoryEntry(fullExercise.historyID)\n  }\n  \n  appStore.showInfoMessage(`Removed ${exercise.name} from session`)\n}\n\nfunction openAddExerciseDialog() {\n  dialogExerciseSearch.value = ''\n  dialogCategoryFilter.value = null\n  dialogTagFilter.value = null\n  addExerciseDialog.value = true\n}\n\nasync function startSession() {\n  startingSession.value = true\n  \n  try {\n    // Set start time to now\n    startTime.value = new Date()\n    \n    // Create session in the database immediately\n    const sessionData = {\n      start_time: startTime.value.toISOString(),\n      end_time: startTime.value.toISOString(), // Temporary end time, will be updated later\n      notes: notes.value || ''\n    }\n    \n    const newSession = await sessionsStore.createSession(sessionData)\n    sessionId.value = newSession.id\n    \n    // Start the timer to show elapsed time\n    startDurationTimer()\n    \n    sessionStarted.value = true\n    appStore.showSuccessMessage('Practice session started!')\n  } catch (error) {\n    console.error('Error creating session:', error)\n    appStore.showErrorMessage(`Failed to start session: ${error.message}`)\n  } finally {\n    startingSession.value = false\n  }\n}\n\nfunction startDurationTimer() {\n  durationInterval.value = setInterval(() => {\n    if (startTime.value) {\n      const now = new Date()\n      const diffMs = now - startTime.value\n      \n      // Format the duration\n      const seconds = Math.floor((diffMs / 1000) % 60)\n      const minutes = Math.floor((diffMs / (1000 * 60)) % 60)\n      const hours = Math.floor(diffMs / (1000 * 60 * 60))\n      \n      sessionDuration.value = `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`\n      \n      // Update duration for active exercises\n      sessionExercises.value.forEach(exercise => {\n        if (exercise.isActive && exercise.startTime) {\n          const exDiffMs = now - exercise.startTime\n          const exSeconds = Math.floor((exDiffMs / 1000) % 60)\n          const exMinutes = Math.floor((exDiffMs / (1000 * 60)) % 60)\n          const exHours = Math.floor(exDiffMs / (1000 * 60 * 60))\n          \n          exercise.duration = `${exHours}:${exMinutes.toString().padStart(2, '0')}:${exSeconds.toString().padStart(2, '0')}`\n        }\n      })\n    }\n  }, 1000)\n}\n\nfunction finishSession() {\n  // Check if any exercise is still active\n  const activeExercise = sessionExercises.value.find(ex => ex.isActive)\n  if (activeExercise) {\n    appStore.showWarningMessage(`Please stop the active exercise \"${activeExercise.name}\" before finishing the session.`)\n    return\n  }\n  \n  finishSessionDialog.value = true\n}\n\nasync function completeSession() {\n  finishingSession.value = true\n  \n  try {\n    const endTime = new Date()\n    \n    // Update the session with the end time and notes\n    const sessionData = {\n      end_time: endTime.toISOString(),\n      notes: notes.value || ''\n    }\n    \n    await sessionsStore.updateSession(sessionId.value, sessionData, 'endTime,notes')\n    \n    appStore.showSuccessMessage('Practice session saved successfully!')\n    \n    // Navigate to session detail\n    router.push({\n      name: 'session-detail',\n      params: { id: sessionId.value }\n    })\n  } catch (error) {\n    console.error('Failed to complete session:', error)\n    appStore.showErrorMessage(`Failed to complete session: ${error.message}`)\n    finishingSession.value = false\n  }\n}\n\nfunction startExercisePractice(exercise) {\n  if (hasActiveExercise.value) {\n    // Already checked in the UI, but double-check here\n    appStore.showWarningMessage('Please finish the current exercise first.')\n    return\n  }\n  \n  // Set exercise as active and record start time\n  exercise.isActive = true\n  exercise.startTime = new Date()\n  exercise.duration = '0:00:00'\n  \n  appStore.showSuccessMessage(`Started practice: ${exercise.name}`)\n}\n\nasync function stopExercisePractice(exercise) {\n  // Set end time and mark as completed\n  exercise.isActive = false\n  exercise.endTime = new Date()\n  exercise.completed = true\n  \n  try {\n    // Save the exercise history entry immediately\n    const exerciseData = {\n      session_id: sessionId.value,\n      exercise_id: exercise.id,\n      start_time: exercise.startTime.toISOString(),\n      end_time: exercise.endTime.toISOString(),\n      bpms: exercise.bpms ? exercise.bpms : [],\n      time_signature: exercise.timeSignature || '4/4',\n      notes: exercise.notes || ''\n    }\n    \n    const newHistoryEntry = await historyStore.createHistoryEntry(exerciseData)\n    exercise.historyID = newHistoryEntry.id\n    appStore.showSuccessMessage(`Completed practice: ${exercise.name}`)\n  } catch (error) {\n    console.error(`Error saving exercise history for ${exercise.name}:`, error)\n    appStore.showErrorMessage(`Failed to save exercise history: ${error.message}`)\n  }\n}\n\nfunction validateBpms(exercise) {\n  // Filter out non-numeric values and convert strings to numbers\n  if (exercise.bpms && Array.isArray(exercise.bpms)) {\n    exercise.bpms = exercise.bpms\n      .map(bpm => {\n        // Convert to string first to handle all input types\n        const bpmStr = String(bpm).trim()\n        // Parse it as a number\n        const bpmNum = parseInt(bpmStr, 10)\n        // Return the number if valid, otherwise null\n        return !isNaN(bpmNum) && bpmNum > 0 ? bpmNum : null\n      })\n      .filter(bpm => bpm !== null) // Remove nulls\n  }\n}\n\nfunction openCancelDialog() {\n  if (sessionStarted.value) {\n    cancelDialog.value = true\n  } else {\n    // If session hasn't started, just go back\n    router.push({ name: 'sessions' })\n  }\n}\n\nasync function confirmCancelSession() {\n  cancelDialog.value = false\n  \n  // If we have created a session in the database, delete it\n  if (sessionId.value) {\n    try {\n      await sessionsStore.deleteSession(sessionId.value)\n    } catch (error) {\n      console.error('Error deleting session:', error)\n    }\n  }\n  \n  // Clean up\n  if (durationInterval.value) {\n    clearInterval(durationInterval.value)\n  }\n  \n  // Navigate back\n  router.push({ name: 'sessions' })\n}\n\n// Check for URL parameter with exercise ID to pre-add\nonMounted(async () => {\n  // Load exercises if not already loaded\n  if (exercisesStore.exercises.length === 0) {\n    await exercisesStore.fetchExercises()\n  }\n  \n  if (categoriesStore.categories.length === 0) {\n    await categoriesStore.fetchCategories()\n  }\n  \n  if (tagsStore.tags.length === 0) {\n    await tagsStore.fetchTags()\n  }\n  \n  // Check for exercise ID in URL\n  const exerciseId = Number(route.query.exercise)\n  if (exerciseId) {\n    const exercise = exercisesStore.exerciseById(exerciseId)\n    if (exercise) {\n      addExerciseToSession(exercise)\n    } else {\n      // If not in store, try to fetch it\n      try {\n        await exercisesStore.fetchExercise(exerciseId)\n        const exercise = exercisesStore.exerciseById(exerciseId)\n        if (exercise) {\n          addExerciseToSession(exercise)\n        }\n      } catch (error) {\n        console.error('Failed to fetch exercise:', error)\n      }\n    }\n  }\n})\n\n// Clean up the timer when component is destroyed\nonBeforeUnmount(() => {\n  if (durationInterval.value) {\n    clearInterval(durationInterval.value)\n  }\n})\n\n// Handle browser back button or leaving the page\nwindow.addEventListener('beforeunload', (event) => {\n  if (sessionStarted.value) {\n    // Standard way to show dialog before leaving page\n    event.preventDefault()\n    event.returnValue = ''\n  }\n})\n</script>\n\n<style scoped>\n.exercise-card {\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.exercise-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n.selected-exercise {\n  border: 2px solid var(--v-primary-base) !important;\n  background-color: rgba(var(--v-primary-base), 0.05);\n}\n</style>\n"],"names":["useHistoryStore","defineStore","historyEntries","ref","loading","error","currentHistoryEntry","currentHistoryLoading","entriesSortedByDate","computed","a","b","entriesByExercise","exerciseId","entry","entriesBySession","sessionId","entriesByDateRange","startDate","endDate","start","end","entryDate","fetchHistoryEntries","params","response","historyAPI","err","fetchHistoryEntry","id","index","createHistoryEntry","entryData","newEntry","updateHistoryEntry","updateMask","formattedUpdateMask","updatedEntry","deleteHistoryEntry","calculateBpmProgress","entries","sorted","progressByDay","date","bpm","props","__props","emit","__emit","computedTo","useCategoriesStore","useTagsStore","truncateText","text","maxLength","handleClick","useExercisesStore","categoriesStore","tagsStore","localPage","tableHeaders","watch","newPage","getCategoryById","categoryId","getTagById","tagId","selectExercise","exercise","isExerciseSelected","handleCardClick","onMounted","router","useRouter","route","useRoute","exercisesStore","sessionsStore","useSessionsStore","historyStore","appStore","useAppStore","sessionStarted","startTime","notes","sessionExercises","startingSession","finishingSession","loadingSessionExercises","sessionDuration","durationInterval","addExerciseDialog","dialogExerciseSearch","dialogCategoryFilter","dialogTagFilter","exerciseSearch","categoryFilter","tagFilter","cancelDialog","finishSessionDialog","finishForm","finishFormValid","timeSignatureOptions","hasActiveExercise","ex","sessionExerciseIds","filteredExercises","result","searchLower","dialogFilteredExercises","search","categoriesForSelect","category","tagsForSelect","tag","formatDateTime","dateTime","isExerciseInSession","getExerciseStatus","getExerciseStatusColor","addExerciseToSession","removeExercise","toggleExerciseInSession","fullExercise","e","openAddExerciseDialog","startSession","sessionData","newSession","startDurationTimer","now","diffMs","seconds","minutes","hours","exDiffMs","exSeconds","exMinutes","exHours","finishSession","activeExercise","completeSession","startExercisePractice","stopExercisePractice","exerciseData","newHistoryEntry","validateBpms","bpmStr","bpmNum","confirmCancelSession","onBeforeUnmount","event"],"mappings":"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"}