{"version":3,"file":"exercises-a2ad682e.js","sources":["../../src/stores/exercises.js"],"sourcesContent":["import { exercisesAPI } from \"@/services/api.js\";\nimport { defineStore } from \"pinia\";\nimport { computed, ref } from \"vue\";\n\nexport const useExercisesStore = defineStore(\"exercises\", () => {\n    // State\n    const exercises = ref([]);\n    const loading = ref(false);\n    const error = ref(null);\n    const currentExercise = ref(null);\n    const currentExerciseLoading = ref(false);\n    const exerciseStats = ref(null);\n    const statsLoading = ref(false);\n\n    // Getters\n    const exercisesSorted = computed(\n        () => {\n            return [...exercises.value].sort(\n                (a, b) => a.name.localeCompare(b.name),\n            );\n        },\n    );\n\n    const exerciseById = computed(() => {\n        return (id) => exercises.value.find((ex) => ex.id === id);\n    });\n\n    const exercisesByCategory = computed(\n        () => {\n            return (categoryId) =>\n                exercises.value.filter(\n                    (ex) =>\n                        ex.categoryIds &&\n                        ex.categoryIds.includes(categoryId),\n                );\n        },\n    );\n\n    const exercisesByTag = computed(\n        () => {\n            return (tagId) =>\n                exercises.value.filter(\n                    (ex) => ex.tag_ids && ex.tag_ids.includes(tagId),\n                );\n        },\n    );\n\n    // Actions\n    async function fetchExercises(params = {}) {\n        loading.value = true;\n        error.value = null;\n\n        try {\n            const response = await exercisesAPI.getAll(params);\n            exercises.value = response.data.exercises || [];\n        } catch (err) {\n            error.value = err.message || \"Failed to fetch exercises\";\n            console.error(\"Error fetching exercises:\", err);\n        } finally {\n            loading.value = false;\n        }\n    }\n\n    async function fetchExercise(id) {\n        currentExerciseLoading.value = true;\n        error.value = null;\n\n        try {\n            const response = await exercisesAPI.get(id);\n            currentExercise.value = response.data;\n\n            // Also update the exercise in the exercises array if it exists\n            const index = exercises.value.findIndex((e) => e.id === id);\n            if (index !== -1) {\n                exercises.value[index] = response.data;\n            } else {\n                exercises.value.push(response.data);\n            }\n        } catch (err) {\n            error.value = err.message ||\n                `Failed to fetch exercise with ID ${id}`;\n            console.error(`Error fetching exercise ${id}:`, err);\n        } finally {\n            currentExerciseLoading.value = false;\n        }\n    }\n\n    async function createExercise(exerciseData) {\n        loading.value = true;\n        error.value = null;\n\n        try {\n            const response = await exercisesAPI.create(exerciseData);\n            const newExercise = response.data;\n            exercises.value.push(newExercise);\n            return newExercise;\n        } catch (err) {\n            error.value = err.message || \"Failed to create exercise\";\n            console.error(\"Error creating exercise:\", err);\n            throw err;\n        } finally {\n            loading.value = false;\n        }\n    }\n\n    async function updateExercise(id, exerciseData, updateMask) {\n        loading.value = true;\n        error.value = null;\n\n        try {\n            // Convert paths array to comma-separated string if it's in object\n            // format\n            let formattedUpdateMask = updateMask;\n            if (\n                updateMask && typeof updateMask === \"object\" &&\n                updateMask.paths\n            ) {\n                formattedUpdateMask = updateMask.paths.join(\",\");\n            }\n\n            const response = await exercisesAPI.update(\n                id,\n                exerciseData,\n                formattedUpdateMask,\n            );\n            const updatedExercise = response.data;\n\n            // Update in the exercises array\n            const index = exercises.value.findIndex((e) => e.id === id);\n            if (index !== -1) {\n                exercises.value[index] = updatedExercise;\n            }\n\n            // Update currentExercise if it's the one being edited\n            if (currentExercise.value && currentExercise.value.id === id) {\n                currentExercise.value = updatedExercise;\n            }\n\n            return updatedExercise;\n        } catch (err) {\n            error.value = err.message ||\n                `Failed to update exercise with ID ${id}`;\n            console.error(`Error updating exercise ${id}:`, err);\n            throw err;\n        } finally {\n            loading.value = false;\n        }\n    }\n\n    async function deleteExercise(id) {\n        loading.value = true;\n        error.value = null;\n\n        try {\n            await exercisesAPI.delete(id);\n\n            // Remove from the exercises array\n            exercises.value = exercises.value.filter((e) => e.id !== id);\n\n            // Clear currentExercise if it's the one being deleted\n            if (currentExercise.value && currentExercise.value.id === id) {\n                currentExercise.value = null;\n            }\n        } catch (err) {\n            error.value = err.message ||\n                `Failed to delete exercise with ID ${id}`;\n            console.error(`Error deleting exercise ${id}:`, err);\n            throw err;\n        } finally {\n            loading.value = false;\n        }\n    }\n\n    async function addExerciseImage(exerciseId, imageData) {\n        loading.value = true;\n        error.value = null;\n\n        try {\n            const response = await exercisesAPI.addImage(exerciseId, imageData);\n\n            // Update exercise with new image if it's in the exercises array\n            const exercise = exercises.value.find((e) => e.id === exerciseId);\n            if (exercise) {\n                if (!exercise.images) {\n                    exercise.images = [];\n                }\n                exercise.images.push(response.data);\n            }\n\n            // Update currentExercise if it's the relevant exercise\n            if (\n                currentExercise.value &&\n                currentExercise.value.id === exerciseId\n            ) {\n                if (!currentExercise.value.images) {\n                    currentExercise.value.images = [];\n                }\n                currentExercise.value.images.push(response.data);\n            }\n\n            return response.data;\n        } catch (err) {\n            error.value = err.message ||\n                `Failed to add image to exercise with ID ${exerciseId}`;\n            console.error(`Error adding image to exercise ${exerciseId}:`, err);\n            throw err;\n        } finally {\n            loading.value = false;\n        }\n    }\n\n    async function deleteExerciseImage(imageId) {\n        loading.value = true;\n        error.value = null;\n\n        try {\n            await exercisesAPI.deleteImage(imageId);\n\n            // Remove image from exercises in the array\n            exercises.value.forEach((exercise) => {\n                if (exercise.images) {\n                    exercise.images = exercise.images.filter((img) =>\n                        img.id !== imageId\n                    );\n                }\n            });\n\n            // Remove image from currentExercise if applicable\n            if (currentExercise.value && currentExercise.value.images) {\n                currentExercise.value.images = currentExercise.value.images\n                    .filter(\n                        (img) => img.id !== imageId,\n                    );\n            }\n        } catch (err) {\n            error.value = err.message ||\n                `Failed to delete image with ID ${imageId}`;\n            console.error(`Error deleting image ${imageId}:`, err);\n            throw err;\n        } finally {\n            loading.value = false;\n        }\n    }\n\n    async function addExerciseLink(exerciseId, linkData) {\n        loading.value = true;\n        error.value = null;\n\n        try {\n            const response = await exercisesAPI.addLink(exerciseId, linkData);\n\n            // Update exercise with new link if it's in the exercises array\n            const exercise = exercises.value.find((e) => e.id === exerciseId);\n            if (exercise) {\n                if (!exercise.links) {\n                    exercise.links = [];\n                }\n                exercise.links.push(response.data);\n            }\n\n            // Update currentExercise if it's the relevant exercise\n            if (\n                currentExercise.value &&\n                currentExercise.value.id === exerciseId\n            ) {\n                if (!currentExercise.value.links) {\n                    currentExercise.value.links = [];\n                }\n                currentExercise.value.links.push(response.data);\n            }\n\n            return response.data;\n        } catch (err) {\n            error.value = err.message ||\n                `Failed to add link to exercise with ID ${exerciseId}`;\n            console.error(`Error adding link to exercise ${exerciseId}:`, err);\n            throw err;\n        } finally {\n            loading.value = false;\n        }\n    }\n\n    async function deleteExerciseLink(linkId) {\n        loading.value = true;\n        error.value = null;\n\n        try {\n            await exercisesAPI.deleteLink(linkId);\n\n            // Remove link from exercises in the array\n            exercises.value.forEach((exercise) => {\n                if (exercise.links) {\n                    exercise.links = exercise.links.filter((link) =>\n                        link.id !== linkId\n                    );\n                }\n            });\n\n            // Remove link from currentExercise if applicable\n            if (currentExercise.value && currentExercise.value.links) {\n                currentExercise.value.links = currentExercise.value.links\n                    .filter(\n                        (link) => link.id !== linkId,\n                    );\n            }\n        } catch (err) {\n            error.value = err.message ||\n                `Failed to delete link with ID ${linkId}`;\n            console.error(`Error deleting link ${linkId}:`, err);\n            throw err;\n        } finally {\n            loading.value = false;\n        }\n    }\n\n    async function fetchExerciseStats(exerciseId, params = {}) {\n        statsLoading.value = true;\n        error.value = null;\n\n        try {\n            const response = await exercisesAPI.getStats(exerciseId, params);\n            exerciseStats.value = response.data;\n            return response.data;\n        } catch (err) {\n            error.value = err.message ||\n                `Failed to fetch stats for exercise with ID ${exerciseId}`;\n            console.error(\n                `Error fetching stats for exercise ${exerciseId}:`,\n                err,\n            );\n            throw err;\n        } finally {\n            statsLoading.value = false;\n        }\n    }\n\n    return {\n        // State\n        exercises,\n        loading,\n        error,\n        currentExercise,\n        currentExerciseLoading,\n        exerciseStats,\n        statsLoading,\n\n        // Getters\n        exercisesSorted,\n        exerciseById,\n        exercisesByCategory,\n        exercisesByTag,\n\n        // Actions\n        fetchExercises,\n        fetchExercise,\n        createExercise,\n        updateExercise,\n        deleteExercise,\n        addExerciseImage,\n        deleteExerciseImage,\n        addExerciseLink,\n        deleteExerciseLink,\n        fetchExerciseStats,\n    };\n});\n"],"names":["useExercisesStore","defineStore","exercises","ref","loading","error","currentExercise","currentExerciseLoading","exerciseStats","statsLoading","exercisesSorted","computed","b","exerciseById","id","ex","exercisesByCategory","categoryId","exercisesByTag","tagId","fetchExercises","params","response","exercisesAPI","err","fetchExercise","index","e","createExercise","exerciseData","newExercise","updateExercise","updateMask","formattedUpdateMask","updatedExercise","deleteExercise","addExerciseImage","exerciseId","imageData","exercise","deleteExerciseImage","imageId","img","addExerciseLink","linkData","deleteExerciseLink","linkId","link","fetchExerciseStats"],"mappings":"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"}